Task 1:
    1)  The system state consists of the current time, all live packets and their state,
        the state of every BS and server, and the state of the controller. For the BSs,
        servers and controller we only need to know if they are currently busy processing,
        as we assume they are always working in this section.
        Events are:
        -Packet sent from meter
        -Packet arrived at BS
        -Packet lost on the way to BS
        -Packet processed in BS
        -Packet sent from BS to C
        -Packet arrived at C
        -Packet processed in C
        -Packet sent from C to server
        -Packet arrived at server
        -Packet processed in server (success)
        
    2)  We chose to make the Base Station entity handle packet scheduling instead of creating many Smart Meter entities 
        as generators. This significantly simplifies the model without an accuracy tradeoff in this situation. The 
        diagram shows a single Base Station handling a single Smart Meter for readability, but it can apply to many 
        Base Stations with many Smart Meters per station. The Base Station would simply send packets belonging to every 
        attached meter before holding.

        See: diagrams/Activity_diagram-1_2.png
        
    3)  The time unit is seconds 
        
        num_of_meters := 1000;
            pkt_total | pkt_success | pkt_failed | pkt_lt200 | pkt_dly AVERAGE/EST.ST.DV/ STD.ERR./  MINIMUM/  MAXIMUM
               100000 |       95025 |       4975 |      8711 |           0.588     0.2768.963&-004     0.110     1.167
               
        num_of_meters := 10000;
            pkt_total | pkt_success | pkt_failed | pkt_lt200 | pkt_dly AVERAGE/EST.ST.DV/ STD.ERR./  MINIMUM/  MAXIMUM
               100000 |       95025 |       4975 |        88 |          43.016    24.4567.933&-002     0.111    85.802
               
        num_of_meters := 100000;
            pkt_total | pkt_success | pkt_failed | pkt_lt200 | pkt_dly AVERAGE/EST.ST.DV/ STD.ERR./  MINIMUM/  MAXIMUM
               100000 |       95025 |       4975 |        88 |          47.508    27.3118.860&-002     0.111    94.802

        We had to make our meters stop producing packets after pkt number 100000 to make the simulation terminate
        As we can see in the information below, the servers are a bottleneck. Because the servers can only process one
        packet each, adding more meters delays packets as they get queued up and wait for the server to finish. With 
        enough meters, packet delay increases proportionally to simulation time, as the packet production rate almost 
        always exceeds the servers' processing capability.
        
                                  R E S O U R C E S
                                  *****************
        TITLE       /   (RE)SET/   OBS/ LIM/ MIN/ NOW/  % USAGE/ AV. WAIT/QMAX
        C                 0.000  95025    1    0    1    19.659     0.171 3136
        Servers           0.000  95025    4    0    4    97.705    11.53246212



    4)  N_s := 2;
            num_of_meters := 1000;
                pkt_total | pkt_success | pkt_failed | pkt_lt200 | pkt_dly AVERAGE/EST.ST.DV/ STD.ERR./  MINIMUM/  MAXIMUM
                   100000 |       95025 |       4975 |      8711 |           0.588     0.2768.963&-004     0.110     1.167
            
            num_of_meters := 2000;
                pkt_total | pkt_success | pkt_failed | pkt_lt200 | pkt_dly AVERAGE/EST.ST.DV/ STD.ERR./  MINIMUM/  MAXIMUM
                   100000 |       95025 |       4975 |        88 |          23.064    12.9084.187&-002     0.111    45.802
                
            num_of_meters := 4000;
                pkt_total | pkt_success | pkt_failed | pkt_lt200 | pkt_dly AVERAGE/EST.ST.DV/ STD.ERR./  MINIMUM/  MAXIMUM
                   100000 |       95025 |       4975 |        88 |          35.534    20.1176.526&-002     0.111    70.802

        
        N_s := 4;
            num_of_meters := 1000;
                pkt_total | pkt_success | pkt_failed | pkt_lt200 | pkt_dly AVERAGE/EST.ST.DV/ STD.ERR./  MINIMUM/  MAXIMUM
                   100000 |       95025 |       4975 |     18103 |           0.348     0.1384.481&-004     0.110     0.640
            
            num_of_meters := 2000;
                pkt_total | pkt_success | pkt_failed | pkt_lt200 | pkt_dly AVERAGE/EST.ST.DV/ STD.ERR./  MINIMUM/  MAXIMUM
                   100000 |       95025 |       4975 |      9118 |           0.585     0.2758.929&-004     0.110     1.128

            num_of_meters := 4000;
                pkt_total | pkt_success | pkt_failed | pkt_lt200 | pkt_dly AVERAGE/EST.ST.DV/ STD.ERR./  MINIMUM/  MAXIMUM
                   100000 |       95025 |       4975 |       182 |          11.835     6.4662.098&-002     0.111    23.457

        See: diagrams/Plot-1_4.png

        As we saw in 3), the servers are a bottleneck at high amounts of meters. Doubling the amount of servers lets us
        run at least twice as many meters before we reach an equivalent bottleneck. You can see this with average delay
        being about equivalent with 1000 SM at two servers, and 2000 at four.
        
    5)  Packetloss can only happen during the wireless transmission to the BR, which has a 5% chance of happening
        pkt_failed / pkt_total = 0.04975 closely resemples this in all tests.
        I believe the lack of variation is because demos doesn't seed it's pseudo random
        number generator with the system time, it simply sets the seed to 907 (line 3022 in demos.sim)
        
        See: diagrams/CDF-1_5.png

Task 2:
    1)  
        
    2)  
        
    3)  
        
    4)  
        
